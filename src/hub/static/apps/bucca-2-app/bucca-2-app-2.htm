<html>

<head>
    <style>
        #Partenza {
            position: absolute;
            margin: auto;
            top: 15%;
            left: 2%;
            width: 25%;
            height: 70%;
            z-index: 2;
            border: solid;
            border-color: #684213;
            min(5vw,4vh)
            background: #FFFBEB;
            box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
            border-radius: 15px;
        }

        .PartContainer {
            position: absolute;
            top: 50%;
            width: 94%;
			left:3%;
            -ms-transform: translate(0%, -50%);
            transform: translate(0%, -50%);
            text-align: center;
        }

        #Arrivo {
            position: absolute;
            top: 15%;
            right: 2%;
            width: 25%;
            height: 70%;
            z-index: 2;
            border: solid;
            border-color: #684213;
            background: #FFFBEB;
            box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
            border-radius: 15px;
        }

        #DivCanvas {
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        #CanvasMathina {
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100%;
            height: 100%;
            z-index: 2;
            visibility: visible;
        }

        #successMessage {
            position: absolute;
            /*left: 50%;
  top:50%;
  width: 98%;
  height: 58%;*/
            z-index: 100;
            background: #f3f1cd;
            border: 2px solid #333;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            border-radius: 10px;
            -moz-box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            -webkit-box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            padding: 10% 0%;
            text-align: center;
            left: 1%;
            top: 1%;
            width: 98%;
            height: 58%;

        }

        #failMessage {
            position: absolute;
            /*left: 50%;
  top:50%;
  width: 98%;
  height: 58%;*/
            z-index: 100;
            background: #f3f1cd;
            border: 2px solid #333;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            border-radius: 10px;
            -moz-box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            -webkit-box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            box-shadow: .3em .3em .5em rgba(0, 0, 0, .8);
            padding: 10% 0%;
            text-align: center;
            left: 1%;
            top: 1%;
            width: 98%;
            height: 58%;

        }

        .button {
            background-color: #4CAF50;
            /* Green */
            border: 2px;
            margin: 5px;
            font-family: Monospace;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size:min(1.6vw,3vh);
            border-radius: 5px;
        }

        html {
            background: url(img/bg_bucca2.jpg) no-repeat center center fixed;
            -webkit-background-size: cover;
            -moz-background-size: cover;
            -o-background-size: cover;
            background-size: cover;
            font-family: "Roboto", sans-serif;
        }
    </style>
    <script>
        Number.prototype.mod = function(n) {
            return ((this % n) + n) % n;
        };

        function Init() {

            Lingua = Number(gup('l', document.location.search));

            if (!isNumeric(Lingua)) Lingua = 1;
            if (Lingua == 0) Lingua = 1;
            Traduci(Lingua);
            window.CanvasMathina = document.getElementById('CanvasMathina');
            window.ctxMathina = CanvasMathina.getContext('2d');

            CanvasMathina.addEventListener('mousedown', Down, false);
            CanvasMathina.addEventListener('mouseup', Up, false);
            CanvasMathina.addEventListener('mouseout', Up, false);
            CanvasMathina.addEventListener('mousemove', Move, false);

            CanvasMathina.addEventListener('touchstart', Down, false);
            CanvasMathina.addEventListener('touchend', Up, false);
            CanvasMathina.addEventListener('touchmove', Move, false);

            window.addEventListener('resize', Resize, false);
            LoadGraphics();
            setTimeout(function() {
                CheckCaricamento();
            }, 10);
            GenerateEx();

        }


        function CheckCaricamento() {
            if (NumeroCaricati == 2) {
                Reset();
                Resize();
            } else {
                setTimeout(function() {
                    CheckCaricamento();
                }, 10);
            }
        }

        function Resize() {
            var doc = document,
                w = window;
            var docEl = (doc.compatMode && doc.compatMode === 'CSS1Compat') ?
                doc.documentElement : doc.body;

            var width = docEl.clientWidth;
            var height = docEl.clientHeight;

            // mobile zoomed in?
            if (w.innerWidth && width > w.innerWidth) {
                width = w.innerWidth;
                height = w.innerHeight;
            }

            window.dimension = [width, height];
            Border = dimension[0] / 100;
            window.MenuDim = [dimension[0] * 8 / 10 + Border, Border, dimension[0] * 2 / 10 - 2 * Border, dimension[1] - 2 * Border];

            CanvasMathina.width = dimension[0];
            CanvasMathina.height = dimension[1];

            Scale = Math.max(2* necklace_dimension[0] / dimension[0],necklace_dimension[1] / dimension[1]);
            CentroCesare = [dimension[0] / 2, dimension[1] / 2];
            Draw(CentroCesare[0], CentroCesare[1], AngPosizione1, AngPosizione2, Scale);
        }


        function Reset() {
            necklace_dimension = [bottom_necklace.width, bottom_necklace.height];
            MousePos = [-1, -1];
            AngMouseFinale = 0;
            AngMouseIniziale = 0;
            AngPosizione1 = 0;
            AngPosizione2 = 0;
            CosaStoMuovendo = 0;
            CaesarShift = 0;



        }

        function LoadGraphics() {
            NumeroCaricati = 0;
            bottom_necklace = new Image();
            bottom_necklace.src = "./bottom.png";
            bottom_necklace.onload = function() {
                NumeroCaricati++;
            }


            top_necklace = new Image();
            top_necklace.src = "./top.png";
            top_necklace.onload = function() {
                NumeroCaricati++;
            }

        }

        function Draw(X0, Y0, A1, A2, Scale) {
            ctxMathina.clearRect(0, 0, dimension[0], dimension[1]);


            let CX = X0 - necklace_dimension[0] / (2 * Scale);
            let CY = Y0 - necklace_dimension[1] / (2 * Scale);

            ctxMathina.drawImage(bottom_necklace, CX, CY, necklace_dimension[0] / Scale, necklace_dimension[1] / Scale);

            ctxMathina.beginPath();
            ctxMathina.strokeStyle = "rgb(177,133,91)";
            ctxMathina.lineWidth = 90 / Scale;
            ctxMathina.arc(X0, Y0, 230 / Scale, 0, Math.PI * 2, true);
            ctxMathina.stroke();

            for (let i = 0; i < Alphabet[Lingua].length; i++) {
                Angle = i * Math.PI * 2 / Alphabet[Lingua].length + A1;
                ctxMathina.save();
                ctxMathina.translate(X0, Y0);
                ctxMathina.rotate(Angle);
                ctxMathina.translate(0, -225 / Scale);
                //ctxMathina.rotate(-Angle);
                /*
                ctxMathina.beginPath();
                ctxMathina.textAlign = 'center';
                ctxMathina.textBaseline = 'middle';
                ctxMathina.font = "50px Arial";
                ctxMathina.fillText(Alphabet[Lingua][i], 0,0);	
                */
                DrawLetter(ctxMathina, Alphabet[Lingua][i], 0, 0, i % 2 ? "rgba(224,235,237,1.0)" : "rgba(234,233,215,1.0)", Scale);

                ctxMathina.translate(0, 225 / Scale);
                ctxMathina.rotate(Math.PI / Alphabet[Lingua].length);
                ctxMathina.translate(0, -225 / Scale);
                ctxMathina.beginPath();
                ctxMathina.strokeStyle = "rgb(104,66,19)";
                ctxMathina.lineWidth = 2;
                ctxMathina.moveTo(0, -50 / Scale);
                ctxMathina.lineTo(0, 40 / Scale);
                ctxMathina.stroke();

                ctxMathina.restore();

            }




            ctxMathina.beginPath();
            ctxMathina.strokeStyle = "rgb(177,133,91)";
            ctxMathina.lineWidth = 90 / Scale;
            ctxMathina.arc(X0, Y0, 330 / Scale, 0, Math.PI * 2, true);
            ctxMathina.stroke();

            for (let i = 0; i < Alphabet[Lingua].length; i++) {
                Angle = i * Math.PI * 2 / Alphabet[Lingua].length + A2;
                ctxMathina.save();
                ctxMathina.translate(X0, Y0);
                ctxMathina.rotate(Angle);
                ctxMathina.translate(0, -325 / Scale);
                //ctxMathina.rotate(-Angle);
                /*
		ctxMathina.beginPath();
		ctxMathina.textAlign = 'center';
		ctxMathina.textBaseline = 'middle';
		ctxMathina.font = "50px Arial";
		ctxMathina.fillText(Alphabet[Lingua][i], 0,0);
*/
                DrawLetter(ctxMathina, Alphabet[Lingua][i], 0, 0, i % 2 ? "rgba(224,235,237,1.0)" : "rgba(234,233,215,1.0)", Scale);

                ctxMathina.translate(0, 325 / Scale);
                ctxMathina.rotate(Math.PI / Alphabet[Lingua].length);
                ctxMathina.translate(0, -325 / Scale);
                ctxMathina.beginPath();
                ctxMathina.strokeStyle = "rgb(104,66,19)";
                ctxMathina.lineWidth = 2;
                ctxMathina.moveTo(0, -50 / Scale);
                ctxMathina.lineTo(0, 40 / Scale);
                ctxMathina.stroke();

                ctxMathina.restore();
            }

            ctxMathina.drawImage(top_necklace, CX, CY, necklace_dimension[0] / Scale, necklace_dimension[1] / Scale);
            WriteLetterTest();
        }

        function DrawLetter(ctx, text, w, h, Color, Scale) {
            // constants
            const blur = 2 / Scale;
            const highLight = "rgba(104,66,19,1)";
            const shadow = "rgba(0,0,0,0.65)";
            const font = (50 / Scale) + "px Arial";
            const background = "linear-gradient(to right,  #1e5799 0%,#3096e5 100%)";
            const border = "2px solid #6CF"


            // set up font and font rendering alignment
            ctx.font = font;
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";

            // draw dark shadow
            ctx.shadowBlur = blur; // shadow
            ctx.fillStyle = ctx.shadowColor = shadow;
            ctx.shadowOffsetY = ctx.shadowOffsetX = blur;
            ctx.fillText(text, w, h);

            // draw highLight
            ctx.fillStyle = ctx.shadowColor = highLight;
            ctx.shadowOffsetY = ctx.shadowOffsetX = -blur;
            ctx.fillText(text, w, h);

            // draw center text that removes pixels
            ctx.shadowColor = "rgba(0,0,0,0.0)"; // turn off shadow
            ctx.fillStyle = "black";
            ctx.fillStyle = Color;
            //ctx.globalCompositeOperation = "destination-out"; // New pixels will remove old pixels making them transparent
            ctx.fillText(text, w, h);
            //ctx.globalCompositeOperation = "source-over";     // restore default composite operation.
        }

        function Move(ev) {
            ev.preventDefault();
            if (ev.changedTouches != null) {
                touchobject = ev.changedTouches[0];
                var mousexMov = touchobject.clientX - this.offsetLeft;
                var mouseyMov = touchobject.clientY - this.offsetTop;
            } else {
                var mousexMov = ev.clientX - this.offsetLeft;
                var mouseyMov = ev.clientY - this.offsetTop;
            }
            MouseStart = [MousePos[0], MousePos[1]];
            MousePos = [mousexMov, mouseyMov];

        }

        function RandomString(N, Alfabeto) {
            var Risp = "";
            for (let i = 0; i < N; i++) {
                Risp = Risp + Alfabeto[Math.floor(Math.random() * Alfabeto.length)];
            }
            return Risp;
        }

        function StringToArray(Text) {
            var Ris = [];
            for (let i = 0; i < Text.length; i++) {
                Ris.push(Alphabet[Lingua].indexOf(Text[i]));
            }
            return Ris;
        }

        function ArrayToString(Arr) {
            var Ris = "";
            for (let i = 0; i < Arr.length; i++) {
                Ris = Ris + Alphabet[Lingua][Arr[i]];
            }
            return Ris;
        }

        function Translate(Text, Number) {
            var TextArray = StringToArray(Text.toUpperCase());
            for (let i = 0; i < TextArray.length; i++) {
                TextArray[i] = (((TextArray[i] + Number) % Alphabet[Lingua].length) + Alphabet[Lingua].length) % Alphabet[Lingua].length;
            }
            return ArrayToString(TextArray);
        }

        function Up(ev) {
            if (CosaStoMuovendo == 1) {
                AngPosizione1 = AngPosizione1 + AngMouseFinale - AngMouseIniziale;
                AngPosizione1 = Math.round(Alphabet[Lingua].length * AngPosizione1 / (2 * Math.PI)) * (2 * Math.PI / Alphabet[Lingua].length);
                CosaStoMuovendo = -1;
            }
            if (CosaStoMuovendo == 2) {
                AngPosizione2 = AngPosizione2 + AngMouseFinale - AngMouseIniziale;
                AngPosizione2 = Math.round(Alphabet[Lingua].length * AngPosizione2 / (2 * Math.PI)) * (2 * Math.PI / Alphabet[Lingua].length);
                CosaStoMuovendo = -1;
            }

            CaesarShift = Math.round(Alphabet[Lingua].length * (AngPosizione2 - AngPosizione1) / (2 * Math.PI));
            Draw(CentroCesare[0], CentroCesare[1], AngPosizione1, AngPosizione2, Scale);
            ev.preventDefault();
            if (typeof CurrentAnim != 'undefined') cancelAnimationFrame(CurrentAnim);
        }

        function WriteLetterTest2() {
            ctxMathina.beginPath();
            ctxMathina.fillStyle = "rgb(0,0,255)";
            ctxMathina.textAlign = 'center';
            ctxMathina.textBaseline = 'middle';
            ctxMathina.font = "100px Arial";
            ctxMathina.fillText("HOME", dimension[0] * 1 / 8, 150);

            ctxMathina.beginPath();
            ctxMathina.fillStyle = "rgb(0,0,255)";
            ctxMathina.textAlign = 'center';
            ctxMathina.textBaseline = 'middle';
            ctxMathina.font = "100px Arial";
            ctxMathina.fillText(Translate("HOME", CaesarShift), dimension[0] * 7 / 8, 150);
        }

        function wrapText(context, text, x, y, maxWidth, lineHeight) {
            var words = text.split(' ');
            var line = '';

            for (var n = 0; n < words.length; n++) {
                var testLine = line + words[n] + ' ';
                var metrics = context.measureText(testLine);
                var testWidth = metrics.width;
                if (testWidth > maxWidth && n > 0) {
                    context.fillText(line, x, y);
                    line = words[n] + ' ';
                    y += lineHeight;
                } else {
                    line = testLine;
                }
            }
            context.fillText(line, x, y);
        }

        function WriteLetterTest() {
            return 0;
            ctxMathina.beginPath();
            ctxMathina.fillStyle = "rgb(0,0,255)";
            ctxMathina.textAlign = 'center';
            ctxMathina.textBaseline = 'middle';
            ctxMathina.font = "100px Arial";
            ctxMathina.fillText("KRPH", dimension[0] * 1 / 8, 150);

            ctxMathina.beginPath();
            ctxMathina.fillStyle = "rgb(0,0,255)";
            ctxMathina.textAlign = 'center';
            ctxMathina.textBaseline = 'middle';
            ctxMathina.font = "70px Arial";
            wrapText(ctxMathina, "Do you think you found the correct key?", dimension[0] * 7 / 8, 150, 400, 60);
        }

        function Distanza(A, B) {
            return Math.sqrt(Math.pow(B[0] - A[0], 2) + Math.pow(B[1] - A[1], 2));
        }

        function Down(ev) {
            ev.preventDefault();
            if (ev.changedTouches != null) {
                touchobject = ev.changedTouches[0];
                var mousexMov = touchobject.clientX - this.offsetLeft;
                var mouseyMov = touchobject.clientY - this.offsetTop;
            } else {
                var mousexMov = ev.clientX - this.offsetLeft;
                var mouseyMov = ev.clientY - this.offsetTop;
            }




            MousePos = [mousexMov, mouseyMov];

            DistClickCentro = Distanza(MousePos, CentroCesare);
            if (DistClickCentro > 185 / Scale && DistClickCentro < 275 / Scale) CosaStoMuovendo = 1;
            else if (DistClickCentro > (330 - 45) / Scale && DistClickCentro < (330 + 45) / Scale) CosaStoMuovendo = 2;
            else CosaStoMuovendo = 0;

            MouseStart = [mousexMov, mouseyMov];
            if (MousePos[0] <= dimension[0] / 2) AngMouseIniziale = -find_angle([dimension[0] / 2, dimension[1] / 2 - 100], [dimension[0] / 2, dimension[1] / 2], MousePos);
            else AngMouseIniziale = find_angle([dimension[0] / 2, dimension[1] / 2 - 100], [dimension[0] / 2, dimension[1] / 2], MousePos);
            startAnima();
        }


        function find_angle(A, B, C) {
            var AB = Math.sqrt(Math.pow(B[0] - A[0], 2) + Math.pow(B[1] - A[1], 2));
            var BC = Math.sqrt(Math.pow(B[0] - C[0], 2) + Math.pow(B[1] - C[1], 2));
            var AC = Math.sqrt(Math.pow(C[0] - A[0], 2) + Math.pow(C[1] - A[1], 2));
            return Math.acos((BC * BC + AB * AB - AC * AC) / (2 * BC * AB));
        }

        function startAnima() {
            fpsInterval = 1000 / 60;
            then = Date.now();
            startTime = then;
            Anima();
        }

        function Anima() {
            window.CurrentAnim = requestAnimationFrame(Anima);
            now = Date.now();
            elapsed = now - then;
            if (elapsed > fpsInterval) {
                then = now - (elapsed % fpsInterval);

                if (MousePos[0] <= dimension[0] / 2) AngMouseFinale = -find_angle([dimension[0] / 2, dimension[1] / 2 - 100], [dimension[0] / 2, dimension[1] / 2], MousePos);
                else AngMouseFinale = find_angle([dimension[0] / 2, dimension[1] / 2 - 100], [dimension[0] / 2, dimension[1] / 2], MousePos);
                ctxMathina.clearRect(0, 0, dimension[0], dimension[1]);
                var Angolo1 = AngPosizione1;
                var Angolo2 = AngPosizione2;
                if (CosaStoMuovendo == 1) Angolo1 += AngMouseFinale - AngMouseIniziale;
                if (CosaStoMuovendo == 2) Angolo2 += AngMouseFinale - AngMouseIniziale;

                Draw(CentroCesare[0], CentroCesare[1], Angolo1, Angolo2, Scale);
            }
        }

        function Finisci() {
            document.getElementById("successMessage").style.display = "block";

        }

        function Sconfitta() {
            document.getElementById("failMessage").style.display = "block";

        }

        function Cesare(Str, Alfabeto, T) {
            Str = Str.toUpperCase();
            Modulo = Alfabeto.length;
            var StrTr = "";
            for (let i = 0; i < Str.length; i++) {
                PosOr = Alfabeto.indexOf(Str[i]);
                if (PosOr == -1) StrTr = StrTr + Str[i];
                else {
                    PosNew = (((PosOr + T) % Modulo) + Modulo) % Modulo;
                    StrTr = StrTr + Alfabeto[PosNew];
                }
            }

            return StrTr;
        }


        function shuffle(array) {
            var currentIndex = array.length,
                temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }

        Lingua = 1;

        Alphabet = [
            "", //The 0-th element of the array is void. This is due to the fact that the translation index begin with 1
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        ];

        ElencoParole = [
            [],
            [
                'I am looking for the treasure of the pirates',
                'I do have a strange sense of humor',
                'I am very happy when someone smiles at me',
                'A good pirate has good dialogue skills',
                'A very nice tree is planted in the garden',
                'I am so happy when the sun is shining',
                'A brave gardener do not stop gardening',
                'A small mouse was stealing the cheese',
                'A nice and happy flower is sprouting',
                'I will study all the afternoon',
                'I will be at home tomorrow',
                'I know a fun fact about mathematics'
            ],
            [
                "Sto cercando il tesoro dei pirati e non ho nascosto niente",
                "Non troverai mai i diamanti e i rubini che ho nascosto al parco",
                "Una mappa del tesoro dei pirati si trova nel bosco",
                "Per trovare il tesoro dovrai prima trovare la mappa dei pirati",
                "Tre passi a destra e tre passi in avanti devi fare",
                "Sta nascosto dentro a un albero particolare",
                "Chi ha preso tre dobloni ha dimenticato il tesoro vero",
                "Sul nascondiglio scelto non ho niente da rivelare"
            ],
            ['Estou procurando o tesouro dos piratas',
                'Eu tenho um estranho senso de humor',
                'Fico muito feliz quando algu&eacute;m sorri para mim',
                'Um bom pirata tem boas habilidades de di&aacute;logo',
                'Uma &aacute;rvore muito bonita &eacute; plantada no jardim',
                'Estou t&atilde;o feliz quando o sol est&aacute; brilhando',
                'Um bravo jardineiro n&atilde;o p&aacute;ra de jardinar',
                'Um pequeno rato estava roubando o queijo',
                'Uma flor bonita e feliz est&aacute; brotando',
                'Vou estudar a tarde toda',
                'Eu estarei em casa amanh&atilde;',
                'Eu conhe&ccedil;o um fato engra&ccedil;ado sobre matem&aacute;tica'
            ],
            ['Ich suche den Schatz der Piraten',
                'Ich habe einen seltsamen Sinn f&uuml;r Humor',
                'Ich bin sehr gl&uuml;cklich, wenn mich jemand anl&auml;chelt',
                'Ein guter Pirat hat gute Dialogf&auml;higkeiten',
                'Im Garten wird ein sehr sch&ouml;ner Baum gepflanzt',
                'Ich bin so gl&uuml;cklich, wenn die Sonne scheint',
                'Ein tapferer G&auml;rtner h&ouml;rt nicht auf, im Garten zu arbeiten',
                'Eine kleine Maus hat den K&auml;se gestohlen',
                'Eine sch&ouml;ne und gl&uuml;ckliche Blume sprie&szlig;t',
                'Ich werde den ganzen Nachmittag lernen',
                'Ich werde morgen zu Hause sein',
                'Ich kenne eine lustige Tatsache &uuml;ber Mathematik'
            ]
        ];

        Traduzioni = [
            [
                ["Trad1"], "Try to decipher this sentence without knowing the key:", "Prova a decifrare questa frase senza conoscere la chiave:", "Tente decifrar esta frase sem saber a chave:", "Versuchen Sie, diesen Satz zu entschl&uuml;sseln, ohne den Schl&uuml;ssel zu kennen:"
            ]
        ];

        function isNumeric(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function gup(name, url) {
            if (!url) url = location.href;
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(url);
            return results == null ? null : results[1];
        }


        function Traduci(Lang) {
            for (var k = 0; k < Traduzioni.length; k++) {
                for (var kk = 0; kk < Traduzioni[k][0].length; kk++) {
                    if (document.getElementById(Traduzioni[k][0][kk]) != null) document.getElementById(Traduzioni[k][0][kk]).innerHTML = Traduzioni[k][Lang];
                }
            }
        }


        function GenerateEx() {
            CorrectAnswer = Math.floor(Math.random() * 4 + 1);
            NumeroParola = Math.floor(Math.random() * ElencoParole[Lingua].length);
            ParolaOriginale = ElencoParole[Lingua][NumeroParola];
            var NumeriTot = Array.from(Array(ElencoParole[Lingua].length).keys());
            NumeriTot.splice(NumeriTot.indexOf(NumeroParola), 1);
            NumeriTot = shuffle(NumeriTot);
            ParolaTradotta = Cesare(ParolaOriginale, Alphabet[Lingua], 1 + Math.floor(Math.random() * (Alphabet[Lingua].length - 1)));
            document.getElementById("paroladatradurre").innerHTML = ParolaTradotta;
            document.getElementById("Btn1").innerHTML = ElencoParole[Lingua][NumeriTot[0]];
            document.getElementById("Btn2").innerHTML = ElencoParole[Lingua][NumeriTot[1]];
            document.getElementById("Btn3").innerHTML = ElencoParole[Lingua][NumeriTot[2]];
            document.getElementById("Btn4").innerHTML = ElencoParole[Lingua][NumeriTot[3]];
            document.getElementById("Btn" + CorrectAnswer).innerHTML = ParolaOriginale;

        }

        function Check(N) {
            if (CorrectAnswer == N) Finisci();
            else Sconfitta();


        }

        function Link() {
            location.reload();

        }
    </script>
</head>

<body onload="Init()">

    <div id="DivCanvas"><canvas id="CanvasMathina"></canvas></div>
    <div id="Partenza">
        <div class="PartContainer">
            <p id="Trad1">Try to decipher this sentence without knowing the key:</p>
            <p id="paroladatradurre" style="word-break:break-all;"></p>
        </div>
    </div>
    <div id="Arrivo">
        <div class="PartContainer"><button type="button" onclick="Check(1)" id="Btn1" class="button"></button><br>
            <button type="button" onclick="Check(2)" id="Btn2" class="button"></button><br>
            <button type="button" onclick="Check(3)" id="Btn3" class="button"></button><br>
            <button type="button" onclick="Check(4)" id="Btn4" class="button"></button><br>
        </div>
    </div>
    <div id="successMessage" style="display:none">
        <img src="img/happy.png" id="certo" width=8% style=" position: absolute;
  top: 30%;
  right: 46%;"></img>
        <img src="img/Festejos.gif" width=40% style=" position: absolute;
  top: 10%;
  right: 30%; z-index: -1;"> </img>

        <img src="img/refresh.png" onclick="Link();" width=10% style=" position: absolute;
  top: 60%;
  right: 45%;"></img>
    </div>

    <div id="failMessage" style="display:none">
        <img src="img/sad.png" id="certo" width=8% style=" position: absolute;
  top: 30%;
  right: 46%;"></img>


        <img src="img/refresh.png" onclick="Link();" width=10% style=" position: absolute;
  top: 60%;
  right: 45%;"></img>
    </div>
</body>

</html>